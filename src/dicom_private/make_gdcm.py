# Copyright (c) 2025 Darcy Mason and contributors. All rights reserved.
# See LICENSE file for details
"""Update the _private_dict.py file using data from the GDCM private dict."""
from datetime import datetime
import xml.etree.ElementTree as ET
from urllib.request import urlopen
from collections import defaultdict
import sys

from pydicom.valuerep import VR
from dicom_private.core import OUT_PATH, write_dict


GDCM_PRIVATE_DICT = (
    r"https://raw.githubusercontent.com/malaterre/GDCM/"
    r"master/Source/DataDictionary/privatedicts.xml"
)
PY_NAME = "gdcm_dict"
DICT_FILENAME = "gdcm.py"
DICT_DOCSTRING = f"""DICOM private dictionary auto-generated by make_gdcm.py.

Data generated {datetime.now():%Y-%m-%d %H:%M} from
{GDCM_PRIVATE_DICT}

The outer dictionary key is the Private Creator name ("owner"), while the inner
dictionary key is a map of DICOM tag to (VR, VM, name, is_retired).
"""


# Manual additions for the autogenerated dict
ADDITIONS = {
}


def parse_private_docbook(doc_root):
    """Return a dict containing the private dictionary data"""
    # Excerpt for understanding formatting, from GDCM file taken 2023-09
    # <?xml version="1.0" encoding="UTF-8"?>
    # <dict>
    # <entry group="0021" element="0010" vr="SQ" vm="1" name="?" owner="SIEMENS MR FMRI"/>
    # ...first "xx" element
    # <entry owner="1.2.840.113663.1" group="0029" element="xx00" vr="US" vm="1" name="?"/>
    # ...last element
    # <entry owner="syngoDynamics" group="0021" element="xxae" vr="OB" vm="1" name="?"/>
    # </dict>

    entries = defaultdict(dict)
    for entry in root:
        owner = entry.attrib["owner"]
        tag = entry.attrib["group"].upper() + entry.attrib["element"].upper()
        tag = tag.replace("XX", "xx")
        vr = entry.attrib["vr"]
        vm = entry.attrib["vm"]
        name = entry.attrib["name"].replace("\\", "\\\\")  # escape backslashes

        # Check VR for conformance
        try:
            VR(vr)
        except Exception:
            print(f"Invalid VR found for {owner} {tag}: {vr}")

            if "_" in vr:
                vr = vr.replace("_", ",")
                print(f"  Replacing VR with {vr}")
            else:
                sys.exit()

        # Convert unknown element names to 'Unknown'
        if name == "?":
            name = "Unknown"

        entries[owner][tag] = (vr, vm, name)

    return entries


if __name__ == "__main__":
    with urlopen(GDCM_PRIVATE_DICT) as response:
        root = ET.fromstring(response.read().decode("utf-8"))

    priv_dict = parse_private_docbook(root)
    for creator, creator_additions in ADDITIONS.items():
        priv_dict[creator].update(creator_additions)

    with open(DICT_FILENAME, "w", encoding="utf8") as py_file:
        py_file.write('"""' + DICT_DOCSTRING + '"""')
        py_file.write("\n\n")
        write_dict(priv_dict, DICT_FILENAME, docstring=DICT_DOCSTRING, py_name=PY_NAME)
